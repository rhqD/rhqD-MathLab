const BPNN = require('./NN/BPNN');
const _ = require('lodash');
const {functions: {tanh}} = require('./rhqD/Node');
const historys = [
  {
    values: '5.979603854319703,7.611357738264375,0.43608740555206493,5.14787603216712,-0.010269348630762266,-5.39234627865641,18.107128480936463,0.4425217000879064,0.5556326144774041,0.28677423301092286,-0.030942067107995803,0.2117583953210615,0.8424031550897384,2.3034175229478806,2.775969166596696,1.0775457628447342,0.46280722344484354,0.36120759380291056,1.5819741345661398,0.16455420964150339,1.951809112425987,4.452873686859579,7.132154499049901,1.7409376312978277,0.8733797043254998,1.985029154935378,3.31574542186406,0.6729989215987692,-3.6274079084350195,-7.027903904816332,-3.591766940454432,-3.3389923916646556,1.2098299116758662,-1.7705601567094902,4.562481171253947,-4.729724365560551,-6.167138438530679,6.139237848594516,1.8099668110656588,-0.9083257606761795,2.634900538246529,-2.6504465201283423',
    accuracy: 0.99311
  },
  {
    values: '5.9819901547274,7.615496240734196,0.1593643406523562,5.151926938659139,-0.01731350019641775,-5.386461802445368,18.11162377804691,0.38463125872467147,0.5504810896892411,0.2867547707185819,-0.02702408909592845,0.21043091372602968,0.8570917117689284,2.3236841274715814,2.7961429529340847,1.0908613199973702,0.4628434771488756,0.35501374562458254,1.5750318232867335,0.16467512372494483,1.9661026734903273,4.461640618752671,7.142010835612757,1.7541257085938655,0.8839660730532517,1.9876371065686147,3.3215396197789007,0.6830579269763878,-3.6245846502466743,-7.040629375647323,-3.5904986952887175,-3.3365222866825492,1.221442442135851,-1.7821523898699636,4.5904372971384575,-4.757570741928712,-6.188028135602917,6.159490099242827,1.8212184911370144,-0.9196115919252594,2.6407838874645373,-2.656840775421421',
    accuracy: 0.9924
  },
  {
    values: '6.008452011870316,7.654772266265037,0.03317532573012071,5.176258520122808,0.001737831643494444,-5.33014527788204,18.114745436913495,0.035158174589889096,0.4262644665981743,0.28618691833972143,-0.02079286310291244,0.12683631678724558,0.9602792289512738,2.4630097230753343,2.896592842138502,1.187377934554785,0.41939202802084097,0.2354090736226343,1.3154446326924176,0.13096161776819504,2.1136396175543313,4.611315911921962,7.281073614323447,1.888329444969411,0.9674697840170889,2.056853386966824,3.4089233237063543,0.762817387209135,-3.667203730448173,-7.231776799637098,-3.7838138979988982,-3.374716843682655,1.3554274889585824,-1.917207007612559,4.9301448799611505,-5.098012529297309,-6.562381463010916,6.525074827311264,1.9467257435489453,-1.0466916259916887,2.739395721346002,-2.759166203947873',
    accuracy: 0.995
  },
  {
    values: '6.179481885218858,7.710453246957923,0.02274543421429751,5.323795565962549,0.023957975648559976,-5.248767809228388,18.169508119637445,0.05128308790329688,0.2196425571748093,0.2846563365254049,0.01722822806815847,-0.08536506780705716,1.084538338158047,2.6622458502883877,3.1063503086836532,1.3041847205345427,0.28883873568956686,0.03785557197896817,0.9492013211710866,0.0261144164995114,2.3382065592996937,4.889093710140182,7.622657181458294,2.092625496027615,1.0896774678933043,2.2592913627100604,3.6592723555728295,0.8771508852525771,-3.9030534857461685,-7.662163390289085,-4.0035269957001045,-3.5870365392178516,1.6319402419390028,-2.1952903682620177,5.6162114845146345,-5.78651268863246,-7.4996063591827555,7.45396743136445,2.1982008267830535,-1.3005120727435435,3.070875638673866,-3.0851830221411927',
    accuracy: 0.997
  },
  {
    values: '8.671457959211974,7.772236769884119,-0.0022749861730593296,7.120566966489327,-0.010586231173745882,-5.1555326636994945,21.278339832212396,-0.004110990172466492,0.24378589633765155,0.2734947698712122,-0.02652106828709405,-0.13547544211158852,1.1290741924407812,2.958226026606893,3.7479057900058694,1.3350914078731895,0.1573080927859959,-0.11347074007512419,0.42179017326740703,-0.09298432137157417,2.5506980683435,5.3465638937948645,7.836180576468987,2.288232107281901,1.128516347621396,2.351345376548882,3.1345355157698163,0.9126345071255307,-4.10443635894794,-7.8439240696206145,-4.41043089301056,-3.7840041085590914,1.8363702964484683,-2.402348060320184,6.089115607480737,-6.266217415050724,-8.101285898905155,8.051293773570023,2.3802070641802606,-1.489271631358803,3.2911524765140743,-3.2966330968661346',
    accuracy: 0.999
  }
];
const myBPNN = new BPNN({input: 2, hls: [4, 4], output: 2, step: 0.05, minE: 0.00000001, random: () => (Math.random() * 10 - 5)});

myBPNN.generateTrainSample = () => {
  const x = Math.random() * 100 - 50;
  const y = Math.random() * 100 - 50;
  const area = (x >= 0 ? 2 : 0) + (y >= 0 ? 1 : 0);
  return [x, y, (area === 0 || area === 3) ? 1 : 0, (area === 1 || area === 2) ? 1 : 0];
};

myBPNN.generateTestSample = () => {
  const x = Math.random() * 20 - 10;
  const y = Math.random() * 20 - 10;
  const area = (x >= 0 ? 2 : 0) + (y >= 0 ? 1 : 0);
  return [x, y, (area === 0 || area === 3) ? 1 : 0, (area === 1 || area === 2) ? 1 : 0];
};

myBPNN.judge = (values, expects) => {
  const expectT1 = expects[0];
  const expectT2 = expects[1];
  const valueT1 = values[0];
  const valueT2 = values[1];
  if (_.isNaN(valueT1) || _.isNaN(valueT2)){
    console.error('NaN during test');
    return null;
  }
  return (valueT1 >= valueT2 && expectT1 === 1) || (valueT1 < valueT2 && expectT2 === 1 );
};

let lastAC = 0;
const onTrainInterval = (ac) => {
  if (ac < lastAC){
    // myBPNN.step = myBPNN.step - 0.001;
    // console.log(`adjust step to **${myBPNN.step}**`);
  }
  lastAC = ac;
}

myBPNN.step = 0.0001;
myBPNN.inject(historys[4].values);
myBPNN.keepTraining({trainTimes: 100, testTimes: 10000, limit: 1, minE: 0, onTrainInterval});
// myBPNN.train(10000);
// myBPNN.inject(historys[0].values);
myBPNN.keepTesting(10000);
debugger
// myBPNN.keepTraining({trainTimes: 100, testTimes: 100000, limit: 0.9999, minE: 0, onTrainInterval});
